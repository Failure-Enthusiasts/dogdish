// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package storage

import (
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
)

type DogdishFoodTypeEnum string

const (
	DogdishFoodTypeEnumEntreesAndSides DogdishFoodTypeEnum = "entrees_and_sides"
	DogdishFoodTypeEnumToppings        DogdishFoodTypeEnum = "toppings"
	DogdishFoodTypeEnumDressings       DogdishFoodTypeEnum = "dressings"
)

func (e *DogdishFoodTypeEnum) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = DogdishFoodTypeEnum(s)
	case string:
		*e = DogdishFoodTypeEnum(s)
	default:
		return fmt.Errorf("unsupported scan type for DogdishFoodTypeEnum: %T", src)
	}
	return nil
}

type NullDogdishFoodTypeEnum struct {
	DogdishFoodTypeEnum DogdishFoodTypeEnum
	Valid               bool // Valid is true if DogdishFoodTypeEnum is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullDogdishFoodTypeEnum) Scan(value interface{}) error {
	if value == nil {
		ns.DogdishFoodTypeEnum, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.DogdishFoodTypeEnum.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullDogdishFoodTypeEnum) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.DogdishFoodTypeEnum), nil
}

type DogdishPreferenceEnum string

const (
	DogdishPreferenceEnumValue0     DogdishPreferenceEnum = ""
	DogdishPreferenceEnumVegan      DogdishPreferenceEnum = "vegan"
	DogdishPreferenceEnumVegetarian DogdishPreferenceEnum = "vegetarian"
)

func (e *DogdishPreferenceEnum) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = DogdishPreferenceEnum(s)
	case string:
		*e = DogdishPreferenceEnum(s)
	default:
		return fmt.Errorf("unsupported scan type for DogdishPreferenceEnum: %T", src)
	}
	return nil
}

type NullDogdishPreferenceEnum struct {
	DogdishPreferenceEnum DogdishPreferenceEnum
	Valid                 bool // Valid is true if DogdishPreferenceEnum is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullDogdishPreferenceEnum) Scan(value interface{}) error {
	if value == nil {
		ns.DogdishPreferenceEnum, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.DogdishPreferenceEnum.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullDogdishPreferenceEnum) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.DogdishPreferenceEnum), nil
}

type DogdishAllergen struct {
	ID   uuid.UUID
	Name string
}

type DogdishCuisine struct {
	ID   uuid.UUID
	Name string
}

type DogdishEvent struct {
	ID      uuid.UUID
	Date    string
	IsoDate time.Time
}

type DogdishFood struct {
	ID         uuid.UUID
	CuisineID  uuid.UUID
	EventID    uuid.UUID
	Name       string
	FoodType   DogdishFoodTypeEnum
	Preference NullDogdishPreferenceEnum
}

type DogdishFoodAllergen struct {
	FoodID     uuid.UUID
	AllergenID uuid.UUID
}
