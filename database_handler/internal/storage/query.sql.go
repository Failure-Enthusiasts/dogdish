// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package storage

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const getAllAllergens = `-- name: GetAllAllergens :many
SELECT id, name FROM dogdish.allergen
`

func (q *Queries) GetAllAllergens(ctx context.Context) ([]DogdishAllergen, error) {
	rows, err := q.db.QueryContext(ctx, getAllAllergens)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DogdishAllergen
	for rows.Next() {
		var i DogdishAllergen
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllCuisines = `-- name: GetAllCuisines :many

SELECT id, name FROM dogdish.cuisine
`

func (q *Queries) GetAllCuisines(ctx context.Context) ([]DogdishCuisine, error) {
	rows, err := q.db.QueryContext(ctx, getAllCuisines)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DogdishCuisine
	for rows.Next() {
		var i DogdishCuisine
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllEvents = `-- name: GetAllEvents :many
SELECT id, date, iso_date FROM dogdish.event
`

func (q *Queries) GetAllEvents(ctx context.Context) ([]DogdishEvent, error) {
	rows, err := q.db.QueryContext(ctx, getAllEvents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DogdishEvent
	for rows.Next() {
		var i DogdishEvent
		if err := rows.Scan(&i.ID, &i.Date, &i.IsoDate); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllFoodAllergens = `-- name: GetAllFoodAllergens :many
SELECT food_id, allergen_id FROM dogdish.food_allergen
`

func (q *Queries) GetAllFoodAllergens(ctx context.Context) ([]DogdishFoodAllergen, error) {
	rows, err := q.db.QueryContext(ctx, getAllFoodAllergens)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DogdishFoodAllergen
	for rows.Next() {
		var i DogdishFoodAllergen
		if err := rows.Scan(&i.FoodID, &i.AllergenID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllFoods = `-- name: GetAllFoods :many
SELECT id, cuisine_id, event_id, name, food_type, preference FROM dogdish.food
`

func (q *Queries) GetAllFoods(ctx context.Context) ([]DogdishFood, error) {
	rows, err := q.db.QueryContext(ctx, getAllFoods)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DogdishFood
	for rows.Next() {
		var i DogdishFood
		if err := rows.Scan(
			&i.ID,
			&i.CuisineID,
			&i.EventID,
			&i.Name,
			&i.FoodType,
			&i.Preference,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllFoodsByCuisineId = `-- name: GetAllFoodsByCuisineId :many
SELECT id, cuisine_id, event_id, name, food_type, preference FROM dogdish.food WHERE cuisine_id = $1
`

func (q *Queries) GetAllFoodsByCuisineId(ctx context.Context, cuisineID uuid.UUID) ([]DogdishFood, error) {
	rows, err := q.db.QueryContext(ctx, getAllFoodsByCuisineId, cuisineID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DogdishFood
	for rows.Next() {
		var i DogdishFood
		if err := rows.Scan(
			&i.ID,
			&i.CuisineID,
			&i.EventID,
			&i.Name,
			&i.FoodType,
			&i.Preference,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllFoodsByEventId = `-- name: GetAllFoodsByEventId :many
SELECT id, cuisine_id, event_id, name, food_type, preference FROM dogdish.food WHERE event_id = $1
`

func (q *Queries) GetAllFoodsByEventId(ctx context.Context, eventID uuid.UUID) ([]DogdishFood, error) {
	rows, err := q.db.QueryContext(ctx, getAllFoodsByEventId, eventID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DogdishFood
	for rows.Next() {
		var i DogdishFood
		if err := rows.Scan(
			&i.ID,
			&i.CuisineID,
			&i.EventID,
			&i.Name,
			&i.FoodType,
			&i.Preference,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllergenByName = `-- name: GetAllergenByName :one

SELECT id FROM dogdish.allergen WHERE name=$1 LIMIT 1
`

// Selects
func (q *Queries) GetAllergenByName(ctx context.Context, name string) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, getAllergenByName, name)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const insertAllergen = `-- name: InsertAllergen :one
INSERT INTO dogdish.allergen (name) VALUES ($1) RETURNING id
`

func (q *Queries) InsertAllergen(ctx context.Context, name string) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, insertAllergen, name)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const insertCuisine = `-- name: InsertCuisine :one

INSERT INTO dogdish.cuisine (name) VALUES ($1) RETURNING id
`

// Inserts
func (q *Queries) InsertCuisine(ctx context.Context, name string) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, insertCuisine, name)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const insertEvent = `-- name: InsertEvent :one
INSERT INTO dogdish.event (date, iso_date) VALUES ($1, $2) RETURNING id
`

type InsertEventParams struct {
	Date    string
	IsoDate time.Time
}

func (q *Queries) InsertEvent(ctx context.Context, arg InsertEventParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, insertEvent, arg.Date, arg.IsoDate)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const insertFood = `-- name: InsertFood :one
INSERT INTO dogdish.food (cuisine_id, event_id, name, food_type, preference) VALUES ($1, $2, $3, $4, $5) RETURNING id
`

type InsertFoodParams struct {
	CuisineID  uuid.UUID
	EventID    uuid.UUID
	Name       string
	FoodType   DogdishFoodTypeEnum
	Preference NullDogdishPreferenceEnum
}

func (q *Queries) InsertFood(ctx context.Context, arg InsertFoodParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, insertFood,
		arg.CuisineID,
		arg.EventID,
		arg.Name,
		arg.FoodType,
		arg.Preference,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const insertFoodAllergen = `-- name: InsertFoodAllergen :one
INSERT INTO dogdish.food_allergen (food_id, allergen_id) VALUES ($1, $2) RETURNING (food_id, allergen_id)
`

type InsertFoodAllergenParams struct {
	FoodID     uuid.UUID
	AllergenID uuid.UUID
}

func (q *Queries) InsertFoodAllergen(ctx context.Context, arg InsertFoodAllergenParams) (interface{}, error) {
	row := q.db.QueryRowContext(ctx, insertFoodAllergen, arg.FoodID, arg.AllergenID)
	var column_1 interface{}
	err := row.Scan(&column_1)
	return column_1, err
}
